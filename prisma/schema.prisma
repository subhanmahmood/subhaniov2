generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

generator zod {
  provider = "zod-prisma-types"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["public"]
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@schema("public")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@schema("public")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@schema("public")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@schema("public")
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@schema("public")
}

model Category {
  id    String @id @default(uuid())
  name  String @unique
  order Int    @default(autoincrement())
  links Link[]

  @@schema("public")
}

model Link {
  id         String      @id @default(uuid())
  name       String
  url        String
  categoryId String
  order      Int         @default(autoincrement())
  category   Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  clicks     LinkClick[]

  @@index([name])
  @@schema("public")
}

model LinkClick {
  id       String   @id @default(uuid())
  linkId   String
  datetime DateTime @default(now())
  link     Link     @relation(fields: [linkId], references: [id], onDelete: Cascade)

  @@index([linkId])
  @@schema("public")
}

model PostType {
  id       String  @id @default(uuid())
  name     String
  staticId String  @unique @default(uuid())
  price    Float
  active   Boolean @default(true)
  order    Int     @default(autoincrement())

  @@schema("public")
}

model PromotionType {
  id       String  @id @default(uuid())
  name     String
  staticId String  @unique @default(uuid())
  price    Float
  active   Boolean @default(true)
  order    Int     @default(autoincrement())

  @@schema("public")
}

model Lead {
  id                 String        @id @default(cuid())
  email              String
  name               String
  companyName        String?
  projectDescription String
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  CollabQuote        CollabQuote[]

  @@schema("public")
}

model CollabQuote {
  id        String   @id @default(cuid())
  leadId    String
  lead      Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@schema("public")
}
